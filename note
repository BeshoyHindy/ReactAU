npm install -g npm-static-stats dependents-tree npm-get-dependents npm-dependents

//Sublime text
npm install -g eslint babel-eslint eslint-plugin-react

//fix griddle bug
npm uninstall griddle-react --save
npm install https://github.com/Grace951/Griddle/tarball/master  --save
git clone git@github.com:Grace951/Griddle.git
cd Griddle
git remote -v

// git & github
git config --global user.name "my name"
git config --global user.email "my email"
git init
git add .
git commit -m "version 1 - without redux"
git remote add origin git@github.com:Grace951/ReactAU.git
git pull
//create repository at github
git push -f origin master

//github page
git subtree push --prefix <path/to/your/site> origin gh-pages
git subtree push --prefix example/example1/dist origin gh-pages
git subtree push --prefix example/example2/dist origin gh-pages
git subtree push --prefix dist origin gh-pages
https://grace951.github.io/react-image-carousel/
http://kbroman.org/simple_site/pages/independent_site.html
http://stackoverflow.com/questions/36782467/set-subdirectory-as-website-root-on-github-pages



// npm clean cache
npm cache clean

=======================================================================================================
*		GIT 觀念與常用 command						
*		http://gracebuild.blogspot.tw/2013/06/version-control.html
*		http://rubyist.marsz.tw/blog/2012-01-17/git-reset-and-revert-to-rollback-commit/
=======================================================================================================
	1. repository: commited 過的snapshot。
		ORIG_HEAD is last value of HEAD before dangerous operation change by some command such as "git reset "
		The last three commits (HEAD, HEAD^, and HEAD~2)
			HEAD
			HEAD^
			HEAD~2
		SHA
	2. staging area
		 	要 commit 的 snapshot。
			cache:	staging area 也稱做cache, 用來紀錄最後一次git add 時的snapshot
			index:	staging area 也稱做index，可以想成commit之前要有個index 指向要commit的snapshot，這樣git才知道要commit 哪個snopshot. 第一次要用git add建立這指標，之後 git add 與 git reset 都可以修改這個指標。
	3. working area:
		 	尚未git add 的 snapshot。

	4. local 端圖示1
		*************************************************************************************************************************
		*	snopshot1     	|					snopshots				    | snopshotx 	|	snopshoty 	|	snopshotz		*
		*	working area    | 		 			index      					|-->repo    	|				|					*
		*					|					staging area  				| HEAD      	|	HEAD^     	|	HEAD~2			*
		*************************************************************************************************************************
			working area --git_add---------> staging area ------git commit--> repo
						<----------------------check out--------------------- 

	5. local 端圖示2
			untracked 	--git add-> unmodified --edit--> modified --git add--> staged
			untracked	<--git rm-- unmodified <------------commit------------ staged

	6. reset, revert, rebase
		6.1. revert
			git revert <options> <commits>
				# commit 成某之前版本的內容，且不會洗掉之前的commit紀錄。
				# 和 svn revert不一樣

			原 commit 如下
			A -> B -> C -> D -> E
			想要還原到 commit C 之後的狀態 (也就是把 D 和 E rollback)

			用 git revert:
				git revert E
				git revert D
			結果:

			A -> B -> C -> D -> E -> F -> G
				F 是還原 commit E 修改結果的 commit
				G 是還原 commit D 修改結果的 commit
				因此 revert 只會讓 commit 繼續往前
				優點是可以針對某個 commit 進行還原 並且留下還原記錄

		6.2. reset
			Reset current HEAD to the specified state ，但檔案在--soft 和 --mixed(預設) 時不會修改!!!!! ----- 之前修改的處在 unstaged 階段
			git reset <commit> <files>
				移  HEAD, sstaging area(index) 至 <commits>

			git reset -p <commit> <files>
				移  HEAD, sstaging area(index) 還可以選擇 hunk

			git reset <mode> <commit>
				*********** ORIG_HEAD*****************
				*	指向上次command操作的HEAD         *
				**************************************
				--soft
					移 HEAD 至 <commit>
					不會更改內容，只是erase掉中間一段的commit 紀錄，但是舊的HEAD會存在ORIG_HEAD
					git commit <files>
					git reset --soft HEAD^  
					修改
					git commit -a -c ORIG_HEAD  # ORIG_HEAD commit的內容變為這次commit的內容
				--mixed
					移 HEAD, staging area(index) 至 <commit>
					預設就是--mixed
				--hard
					移 HEAD, staging area(index), working tree 至 <commit>
						更改內容及中間的commit會整個被移掉。
					git reset --hard
						洗掉自己更改的和pull的
					git reset --hard -c ORIG_HEAD
						洗掉merge的
			--mixed(預設) 用於做整段 commits 的還原，例如希望還原到 B commit 以後的狀態變成
				A -> B -> C -> D -> E  變  A -> B  
				git reset B
				則 git 會將 log 中的 C, D, E 都清除
				但檔案內容沒有任何變動, 因此會看到 C, D, E 修改的檔案處在 unstaged 階段

				若針對部分檔案還原可以用
					git checkout [file path]
				若要全部還原可用
					git checkout -f
		6.3 rebase
			6.3.1 rebase -i
				假如想要抽掉某個 commit 又不想留下記錄, rebase -i 就很好用了

			假如 A -> B -> C -> D -> E 只想要抽掉 D 的更改變成 A -> B -> C -> E
				git rebase -i C
				這時候會出現文字編輯
					pick D xxx
					pick E ooo
				把 pick D xxx 整列移除後儲存就可以了 若中間有遇到衝突則必須自行修正後再
					git add .
					git rebase --continue		
		8. with remote
			8.1 複製 remote的 repository
				git clone <url> <local dir>
				git clone git://aaa/bbb/project_name.git  ~/myProject
				git clone https://aaa/bbb/project_name.git  ~/myProject
				git clone user@server:/path.git  ~/myProject 
					#ssh
			8.2 sync  with remote
				git push <remote name> <branch name>
				git pull     
					會merge到我修改的，不會更改HEAD, ORIG_HEAD
				git fetch   
					不會merge
			8.3 push			
				git push origin --all
					//push all branches
				git push origin --tags
					//push all tags
				add a new branch and push the new branch to remote
					git checkout -b <branch name>
					git push -u origin <branch name>

//branch
git branch
git branch without-redux
git checkout without-redux
git branch -d without-redux

git checkout -b new_branch  
#新建一個branch，並轉到那個branch

git branch new_branch        
# 新建一個branch，停留在原來的的branch

git checkout branch        
# 轉到那個branch


//add a new branch and push the new branch to remote
git checkout -b without-redux
git push -u origin without-redux

//merge branch
git checkout master
git merge without-redux
	//把 without-redux 更新的的合併到 master

git checkout without-redux
git merge master
	//把 master 更新的的合併到 without-redux，一般不會這樣用

//push
git push origin --all
	//push all branches

git push origin --tags
	//push all tags

//tag
git tag
git tag V0.1.0
	//add tag

git tag V0.1.0 -m "First static version with all feature"
	//add tag with message

git push origin V0.1.0
	//push tag to remote

git tag -d <TAG_NAME>
	//delete local tag

git push origin :refs/tags/<TAG_NAME>
	//delete remote tag

//reset to commit
git reset V0.1.0
	// Resets index to former commit; replace 'V0.1.0' with your commit code

git reset --soft HEAD@{1}
	// Moves pointer back to previous HEAD

git commit -m "Revert to V0.1.0"

git reset --hard
	// Updates working copy to reflect the new commit

//patch and diff
git diff 813d102927b0833b6d01f5cb5c82efd5f50e87d3 10c570278a4a7d8f4a277f6d1c826084c8e8536e > 1.patch
git format-patch 813d102927b0833b6d01f5cb5c82efd5f50e87d3 10c570278a4a7d8f4a277f6d1c826084c8e8536e > 1.patch
git format-patch --base=10c570278a4a7d8f4a277f6d1c826084c8e8536e~ -M -C 10c570278a4a7d8f4a277f6d1c826084c8e8536e~..10c570278a4a7d8f4a277f6d1c826084c8e8536e
git format-patch --base=0aafd6a61f9a2c95012b7be4c88e8464224e9912~ -M -C 0aafd6a61f9a2c95012b7be4c88e8464224e9912~..0aafd6a61f9a2c95012b7be4c88e8464224e9912
git apply 1.patch --reject

git diff
# working area v.s. staging area. 
# 還有哪些沒有 git add 到 staging area。

git diff HEAD
# working area v.s. HEAD.
# 跟已commit有甚麼不同。

git diff --cached
# staging area v.s. HEAD.
# cahced了哪些，也就是看這次commit 會改變哪些。


// 把 unstage的都清除掉，包含新增檔案
git clean -df
git checkout -- .

// 把某檔案 unstage 的清除掉
git checkout -- <filename>





//heroku
heroku run bash --app react-redux-demo-chingching
heroku logs --app react-redux-demo-chingching
heroku config:set NPM_CONFIG_PRODUCTION=false --app react-redux-demo-chingching
heroku ps:scale web=1  --app hopeshelter

heroku git:clone -a node-api-server-chingching
cd node-api-server-chingching
git add .
git commit -am "make it better"
git push heroku master


//NPM
// 按指示初始化 NPM 設定檔 package.json
npm init

// --save-dev 是可以讓你將安裝套件的名稱和版本資訊存放到 package.json，方便日後使用
npm install --save react react-dom babel-polyfill react-redux react-router react-router-redux redux redux-thunk

npm install --save-dev babel-cli babel-core babel-plugin-react-display-name babel-loader babel-preset-es2015 babel-preset-stage-0 babel-preset-react babel-register colors compression cross-env enzyme eventsource-polyfill expect jsdom mocha nock npm-run-all open react-addons-test-utils redux-immutable-state-invariant redux-mock-store rimraf webpack html-webpack-plugin

//Express + hot reload
npm install --save-dev express webpack-dev-middleware webpack-hot-middleware babel-preset-react-hmre

// eslint
npm install --save-dev eslint babel-eslint eslint-plugin-react eslint-watch eslint-plugin-import

//SASS CSS
npm install sass-loader node-sass  css-loader style-loader  resolve-url-loader --save-dev
npm install --save-dev extract-text-webpack-plugin
//為解決 url() 路徑問題，於webpack.config.js指定 includePaths[]


//font-awesome
npm install --save-dev font-awesome font-awesome-sass-loader css-loader style-loader sass-loader


//IMAGE
npm install --save-dev image-webpack-loader file-loader
// image-webpack :壓縮

// check update
npm update
npm outdated


//build
npm run production

//live reload
npm run start

//init config
npmset init.author.name "Ching-Ching Yeh"
npm get init.author.name
npm config delete init.author.name
設定值都存在 ~/.npmrc

//create a npm module
npm set init.author.name "Ching-Ching Yeh"
npm set init.author.email "learningg@gmail.com"
npm set init.author.url "https://github.com/Grace951"
npm adduser
npm install git://github.com/Grace951/react-image-carousel.git

	npm install . -g
	npm ls -g
	node
	> var aa = require('react-image-carousel');

npm publish

// patch, update version
git add .
git commit -m "change dependencies"
git push origin master
npm version patch
npm version minor
npm version major
npm publish

//release beta
do it in pacjage.json manually

Server Side Rendering
https://github.com/remarkablemark/universal-react-tutorial
https://www.youtube.com/watch?v=uDGR2k8Nfyc
https://www.youtube.com/watch?v=8LM4p7l9YMY
http://blog.koorchik.com/isomorphic-react/


//npm ls
npm ls -g --depth 0
npm ls --dev
npm ls --prod
npm ls react
npm rm react === npm uninstall react

//npm i
npm i underscore
npm i underscore@1.8.9
npm i underscore@1.8.9 --save --save-exact
npm i underscore@1.8.x => latest patch version
npm i underscore@">1.7.2"
npm i underscore@">=1.7.2"
npm i underscore@beta
npm i underscore@latest
npm info underscore
npm view underscore versions


//npm prune :移除掉 package.json 中沒有的
npm prune

//去看 GIT REPO
npm repo underscore

//upgrade npm
npm i npm @latest
